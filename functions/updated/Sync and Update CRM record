// voidSyncRecord(String crmAPIRequest)
// Extract the body string from the request
body = crmAPIRequest.get("body");
// Log the raw body to verify data
info "Raw body: " + body;
// Parse the body as JSON
jsonData = body.toMap();
if(jsonData != null)
{
	// Extract the 'type' and 'appointmentId' fields
	sourceType = jsonData.get("type");
	appointmentId = jsonData.get("appointmentId");
	// Log extracted values
	info "Extracted Type: " + sourceType;
	info "Extracted Appointment ID: " + appointmentId;
	// Check if 'sourceType' is either 'WEB' or 'APP'
	if(sourceType != null && (sourceType == "WEB" || sourceType == "APP"))
	{
		// Prepare search query, ensure appointmentId is treated as a string
		searchQuery = "(Acuity_Appointment_ID:equals:" + appointmentId + ")";
		info "Search Query: " + searchQuery;
		// Search for the record in the Meetings module using appointmentId
		meetingRecords = zoho.crm.searchRecords("Events",searchQuery);
		info "Search Result: " + meetingRecords;
		if(!meetingRecords.isEmpty())
		{
			// Assuming you're updating the first record found
			meetingId = meetingRecords.get(0).get("id");
			// Create a map with fields to update
			updateData = Map();
			// Update the Source field based on the type
			if(sourceType == "WEB")
			{
				updateData.put("Source","Web");
			}
			else if(sourceType == "APP")
			{
				updateData.put("Source","App");
			}
			// Update the record in the Meetings module
			updateResponse = zoho.crm.updateRecord("Events",meetingId,updateData);
			// Log the update response
			info "Update Response: " + updateResponse;
		}
		else
		{
			info "No meeting record found with Appointment ID: " + appointmentId + ". Creating a new record.";
			// Fetch appointment details by appointment_id
			response = invokeurl
			[
				url :"https://acuityscheduling.com/api/v1/appointments/" + appointmentId
				type :GET
				connection:"acuityscheduling"
			];
			//info response;
			if(response != null && response.get("id") != null)
			{
				firstName = ifnull(response.get("firstName"),"N/A");
				lastName = ifnull(response.get("lastName"),"N/A");
				phone = ifnull(response.get("phone"),"N/A");
				email = ifnull(response.get("email"),"N/A");
				appointmentId = response.get("id");
				datetimeStr = response.get("datetime");
				confirmationPage = ifnull(response.get("confirmationPage"),"N/A");
				//timezone = ifnull(response.get("timezone"),"N/A");
				clientTimezone = response.get("timezone");
				calendarTimezone = response.get("calendarTimezone");
				type = ifnull(response.get("type"),"N/A");
				amountPaid = ifnull(response.get("amountPaid"),0.0);
				priceSold = ifnull(response.get("priceSold"),0.0);
				certificate = ifnull(response.get("certificate"),"N/A");
				appointmentTypeID = response.get("appointmentTypeID");
				calendarID = response.get("calendarID");
				calendarId = response.get("calendarID");
				duration = response.get("duration").toNumber();
				// Fetch payment details by appointment_id
				paymentResponse = invokeurl
				[
					url :"https://acuityscheduling.com/api/v1/appointments/" + appointmentId + "/payments"
					type :GET
					connection:"acuityscheduling"
				];
				//info paymentResponse;
				paymentAmount = 0.0;
				paymentMethod = "N/A";
				paymentID = "N/A";
				if(paymentResponse != null && paymentResponse.size() > 0)
				{
					paymentAmount = ifnull(paymentResponse.get(0).get("amount"),0.0);
					paymentMethod = ifnull(paymentResponse.get(0).get("processor"),"N/A");
					paymentID = ifnull(paymentResponse.get(0).get("transactionID"),"N/A");
				}
				// Fetch calendar details
				calendarResponse = invokeurl
				[
					url :"https://acuityscheduling.com/api/v1/calendars"
					type :GET
					connection:"acuityscheduling"
				];
				//info calendarResponse;
				calendarEmail = "N/A";
				// Default value if no matching calendar ID is found
				if(calendarResponse != null)
				{
					for each  calendar in calendarResponse
					{
						if(calendar.get("id") == calendarId)
						{
							calendarEmail = ifnull(calendar.get("email"),"N/A");
							break;
						}
					}
				}
				// Create Event_Title
				eventTitle = firstName + " " + lastName + " - " + type;
				// Fetch all appointments for the given email
				appointmentsResponse = invokeurl
				[
					url :"https://acuityscheduling.com/api/v1/appointments"
					type :GET
					parameters:{"email":email}
					connection:"acuityscheduling"
				];
				//info appointmentsResponse;
				// Initialize counters
				appointmentCount = 0;
				totalAmountPaid = 0.0;
				for each  appointment in appointmentsResponse
				{
					appointmentCount = appointmentCount + 1;
					totalAmountPaid = totalAmountPaid + toDecimal(ifnull(appointment.get("amountPaid"),0.0)) * 1.00;
					// Multiplying by 1.0 to ensure it is treated as a float
				}
				//
				// EXTRACTED DATA
				datePart = datetimeStr.substring(0,10);
				timePart = datetimeStr.substring(11,19);
				timezonePart = datetimeStr.substring(19);
				// Combine the date and time parts
				formattedDatetimeStr = datePart + " " + timePart;
				info "formattedDatetimeStr " + formattedDatetimeStr;
				datetimeObj = toString(formattedDatetimeStr);
				info "datetimeObj: " + datetimeObj;
				// ADMIN DATETIMEZONE
				info "ADMIN";
				adminTimezoneResponse = invokeurl
				[
					url :"https://www.zohoapis.com/crm/v6/users?type=CurrentUser"
					type :GET
					connection:"zoho_oauth"
				];
				adminDetails = adminTimezoneResponse.get("users").get(0);
				adminCurrentTimezone = adminDetails.get("time_zone");
				info "Current Admin Timezone: " + adminCurrentTimezone;
				// 	info "ADMIN: "  + toDateTimeString(unixctime,"MMM dd, yy 'at' hh:mm:ss z, E",adminCurrentTimezone);
				adminunix = datetimeObj.unixEpoch(calendarTimezone);
				info "adminunix: " + adminunix;
				// Convert datetime to admin timezone
				formattedStartDateTime = toDateTimeString(adminunix,"yyyy-MM-dd'T'HH:mm:ss",adminCurrentTimezone);
				info "formattedAdminDatetime " + formattedStartDateTime;
				admDateTime = toDatetime(formattedStartDateTime);
				info "admDateTime: " + admDateTime;
				admDatePart = formattedStartDateTime.substring(0,10);
				admTimePart = formattedStartDateTime.substring(11,19);
				admDateTime = toDate(admDatePart,"yyyy-MM-dd") + " " + admTimePart;
				info "admDateTime: " + admDateTime;
				formattedEndDateTime = admDateTime.addMinutes(duration).toString("yyyy-MM-dd'T'HH:mm:ss");
				info "formattedEndDateTime: " + formattedEndDateTime;
				// COACH DATETIMEZONE
				info "COACH";
				formattedCoachDateTime = toDateTimeString(adminunix,"yyyy-MM-dd'T'HH:mm:ss",calendarTimezone);
				info "formattedCoachDatetime " + formattedCoachDateTime;
				// CLIENT DATETIMEZONE
				info "CLIENT";
				formattedClientDatetime = toDateTimeString(adminunix,"yyyy-MM-dd'T'HH:mm:ss",clientTimezone);
				info "formattedClientDatetime " + formattedClientDatetime;
				// Map data to Zoho Leads
				// Check if lead with the same email already exists
				searchCriteria = "(Email:equals:" + email + ")";
				leadSearch = zoho.crm.searchRecords("Leads",searchCriteria);
				if(leadSearch.isEmpty())
				{
					// Lead does not exist, create a new lead
					leadMap = Map();
					leadMap.put("First_Name",firstName);
					leadMap.put("Last_Name",lastName);
					leadMap.put("Phone",phone);
					leadMap.put("Email",email);
					leadMap.put("Total_Amount_of_Appointment",totalAmountPaid);
					leadMap.put("Total_Count_of_Appointment",appointmentCount);
					leadResponse = zoho.crm.createRecord("Leads",leadMap);
					// 		info leadResponse;
					if(leadResponse.get("id") != null)
					{
						leadId = leadResponse.get("id");
					}
					else
					{
						info "Failed to create Lead.";
						return;
					}
				}
				else
				{
					// Lead exists, use existing lead ID
					leadId = leadSearch.get(0).get("id");
					// Update totalAmountPaid and appointmentCount for existing lead
					leadMap = Map();
					leadMap.put("Total_Amount_of_Appointment",totalAmountPaid);
					leadMap.put("Total_Count_of_Appointment",appointmentCount);
					updateResponse = zoho.crm.updateRecord("Leads",leadId,leadMap);
					// 		info updateResponse;
				}
				// Map data to Zoho Meetings
				meetingMap = Map();
				meetingMap.put("Acuity_Appointment_ID",appointmentId);
				meetingMap.put("Start_DateTime",formattedStartDateTime);
				meetingMap.put("End_DateTime",formattedEndDateTime);
				meetingMap.put("Client_Date_Time",formattedClientDatetime);
				meetingMap.put("Client_Timezone",clientTimezone);
				meetingMap.put("Client_Email",email);
				meetingMap.put("Confirmation_Page_URL",confirmationPage);
				meetingMap.put("Coach_Name",type);
				meetingMap.put("Coach_Date_Time",formattedCoachDateTime);
				meetingMap.put("Coach_Timezone",calendarTimezone);
				meetingMap.put("Amount_Paid",amountPaid);
				meetingMap.put("Price_Sold",priceSold);
				meetingMap.put("Promocode",certificate);
				meetingMap.put("Event_Title",eventTitle);
				meetingMap.put("Payment_ID",paymentID);
				meetingMap.put("Payment_Amount",paymentAmount);
				meetingMap.put("Payment_Method",paymentMethod);
				//////////////////////////////////////////////SOURCE OF MEETING
				if(sourceType == "WEB")
				{
					meetingMap.put("Source","Web");
				}
				else if(sourceType == "APP")
				{
					meetingMap.put("Source","App");
				}
				// Initialize the list for participants
				participantsList = list();
				// Sample input string for calendar emails
				calendarEmailsInput = calendarEmail;
				// 	info "calendar emails: " + calendarEmailsInput;
				// 	info "user email: " + email;
				delimiter = ",";
				// Initialize the list to hold email addresses
				calendarEmails = list();
				// Extract and process the first email
				firstDelimiterIndex = calendarEmailsInput.indexOf(delimiter);
				if(firstDelimiterIndex != -1)
				{
					firstEmail = calendarEmailsInput.substring(0,firstDelimiterIndex).trim();
					calendarEmails.add(firstEmail);
					// Extract the remaining part for further processing
					calendarEmailsInput = calendarEmailsInput.substring(firstDelimiterIndex + delimiter.length()).trim();
				}
				else
				{
					firstEmail = calendarEmailsInput.trim();
					calendarEmails.add(firstEmail);
					calendarEmailsInput = "";
					// Clear the string if no delimiter is found
				}
				// Extract and process the second email (if available)
				if(calendarEmailsInput.length() > 0)
				{
					secondEmail = calendarEmailsInput.trim();
					calendarEmails.add(secondEmail);
				}
				// Add participants from calendarEmails list
				if(calendarEmails.size() > 0)
				{
					participant1 = Map();
					participant1.put("type","email");
					participant1.put("participant",calendarEmails.get(0));
					participantsList.add(participant1);
					// 		info "participant 1: " + participant1;
				}
				if(calendarEmails.size() > 1)
				{
					participant2 = Map();
					participant2.put("type","email");
					participant2.put("participant",calendarEmails.get(1));
					participantsList.add(participant2);
					// 		info "participant 2: " + participant2;
				}
				// Add participant3 only if it is distinct and needed
				if(calendarEmails.size() > 1)
				{
					// Check to ensure it's not a duplicate
					if(calendarEmails.get(1) != calendarEmails.get(0))
					{
						participant3 = Map();
						participant3.put("type","email");
						participant3.put("participant",calendarEmails.get(1));
						participantsList.add(participant3);
						// 			info "participant 3: " + participant3;
					}
				}
				// Assuming 'email' is defined elsewhere in your code
				participantUser = Map();
				participantUser.put("type","email");
				participantUser.put("participant",email);
				participantsList.add(participantUser);
				// 	info "user participant: " + participantUser;
				// Assign participants to the meetingMap
				meetingMap.put("Participants",participantsList);
				meetingMap.put("Coach_Email",calendarEmails.get(0));
				meetingMap.put("What_Id",leadId);
				// Associate the lead ID with the meeting
				meetingMap.put("$se_module","Leads");
				// Create Meeting record
				meetingResponse = zoho.crm.createRecord("Events",meetingMap);
				// 	info meetingResponse;
				//
				/////////////////////////////////////////////////////////////////////////////// INVITATIONS
				// Check if the meeting was successfully created
				if(meetingResponse.get("id") != null)
				{
					id = meetingResponse.get("id");
					// Fetch the existing Participants for the created event
					resp = zoho.crm.getRecordById("Events",id);
					// Store the original participants before updating
					originalParticipants = resp.get("Participants");
					// Update to send notification to only one participant
					upd = zoho.crm.updateRecord("Events",id,{"Participants":{{"type":"email","participant":"jayanntestacc@gmail.com"}},"$send_notification":true});
					info upd;
					// Restore original participants without sending notification
					restore = zoho.crm.updateRecord("Events",id,{"Participants":originalParticipants,"$send_notification":false});
					info restore;
				}
			}
		}
	}
	else
	{
		info "Type is not 'WEB' or 'APP', skipping update.";
	}
}
else
{
	info "Failed to parse JSON data from body.";
}
