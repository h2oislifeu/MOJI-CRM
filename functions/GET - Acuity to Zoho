//void InvokeURL(String crmAPIRequest)

// Extract the body string from the request
body = crmAPIRequest.get("body");
info body;
// Extract the "id" parameter from the body string
idStartIndex = body.indexOf("id=") + 3;
idEndIndex = body.indexOf("&",idStartIndex);
if(idEndIndex == -1)
{
	id = body.substring(idStartIndex);
}
else
{
	id = body.substring(idStartIndex,idEndIndex);
}
// Fetch appointment details by appointment_id
response = invokeurl
[
	url :"https://acuityscheduling.com/api/v1/appointments/" + id
	type :GET
	connection:"acuityscheduling"
];
//info response;
if(response != null && response.get("id") != null)
{
	firstName = ifnull(response.get("firstName"),"N/A");
	lastName = ifnull(response.get("lastName"),"N/A");
	phone = ifnull(response.get("phone"),"N/A");
	email = ifnull(response.get("email"),"N/A");
	appointmentId = response.get("id");
	datetime = response.get("datetime");
	confirmationPage = ifnull(response.get("confirmationPage"),"N/A");
	timezone = ifnull(response.get("timezone"),"N/A");
	type = ifnull(response.get("type"),"N/A");
	amountPaid = ifnull(response.get("amountPaid"),0.0);
	priceSold = ifnull(response.get("priceSold"),0.0);
	certificate = ifnull(response.get("certificate"),"N/A");
	calendarId = response.get("calendarID");
	// Fetch payment details by appointment_id
	paymentResponse = invokeurl
	[
		url :"https://acuityscheduling.com/api/v1/appointments/" + id + "/payments"
		type :GET
		connection:"acuityscheduling"
	];
	info paymentResponse;
	paymentAmount = 0.0;
	paymentMethod = "N/A";
	paymentID = "N/A";
	if(paymentResponse != null && paymentResponse.size() > 0)
	{
		paymentAmount = ifnull(paymentResponse.get(0).get("amount"),0.0);
		paymentMethod = ifnull(paymentResponse.get(0).get("processor"),"N/A");
		paymentID = ifnull(paymentResponse.get(0).get("transactionID"),"N/A");
	}
	// Fetch calendar details
	calendarResponse = invokeurl
	[
		url :"https://acuityscheduling.com/api/v1/calendars"
		type :GET
		connection:"acuityscheduling"
	];
	//info calendarResponse;
	calendarEmail = "N/A";
	// Default value if no matching calendar ID is found
	if(calendarResponse != null)
	{
		for each  calendar in calendarResponse
		{
			if(calendar.get("id") == calendarId)
			{
				calendarEmail = ifnull(calendar.get("email"),"N/A");
				break;
			}
		}
	}
	// Create Event_Title
	eventTitle = firstName + " " + lastName + " - " + type;
	// Fetch all appointments for the given email
	appointmentsResponse = invokeurl
	[
		url :"https://acuityscheduling.com/api/v1/appointments"
		type :GET
		parameters:{"email":email}
		connection:"acuityscheduling"
	];
	//info appointmentsResponse;
	// Initialize counters
	appointmentCount = 0;
	totalAmountPaid = 0.0;
	for each  appointment in appointmentsResponse
	{
		appointmentCount = appointmentCount + 1;
		totalAmountPaid = totalAmountPaid + toDecimal(ifnull(appointment.get("amountPaid"),0.0)) * 1.00;
		// Multiplying by 1.0 to ensure it is treated as a float
	}
	// Convert datetime to Zoho datetime and calculate end time
	formattedStartDateTime = datetime.toString("yyyy-MM-dd'T'HH:mm:ss'Z'");
	endDateTime = datetime.addHour(1);
	formattedEndDateTime = endDateTime.toString("yyyy-MM-dd'T'HH:mm:ss'Z'");
	// Map data to Zoho Leads
	// Check if lead with the same email already exists
	searchCriteria = "(Email:equals:" + email + ")";
	leadSearch = zoho.crm.searchRecords("Leads",searchCriteria);
	if(leadSearch.isEmpty())
	{
		// Lead does not exist, create a new lead
		leadMap = Map();
		leadMap.put("First_Name",firstName);
		leadMap.put("Last_Name",lastName);
		leadMap.put("Phone",phone);
		leadMap.put("Email",email);
		leadMap.put("Total_Amount_of_Appointment",totalAmountPaid);
		leadMap.put("Total_Count_of_Appointment",appointmentCount);
		leadResponse = zoho.crm.createRecord("Leads",leadMap);
		info leadResponse;
		if(leadResponse.get("id") != null)
		{
			leadId = leadResponse.get("id");
		}
		else
		{
			info "Failed to create Lead.";
			return;
		}
	}
	else
	{
		// Lead exists, use existing lead ID
		leadId = leadSearch.get(0).get("id");
		// Update totalAmountPaid and appointmentCount for existing lead
		leadMap = Map();
		leadMap.put("Total_Amount_of_Appointment",totalAmountPaid);
		leadMap.put("Total_Count_of_Appointment",appointmentCount);
		updateResponse = zoho.crm.updateRecord("Leads",leadId,leadMap);
		info updateResponse;
	}
	// Map data to Zoho Meetings
	meetingMap = Map();
	meetingMap.put("Acuity_Appointment_ID",appointmentId);
	meetingMap.put("Start_DateTime",formattedStartDateTime);
	meetingMap.put("End_DateTime",formattedEndDateTime);
	meetingMap.put("Invitee_Date_Time",formattedStartDateTime);
	meetingMap.put("Client_Email",email);
	meetingMap.put("Confirmation_Page_URL",confirmationPage);
	meetingMap.put("Invitee_Timezone",timezone);
	meetingMap.put("Coach_Name",type);
	meetingMap.put("Amount_Paid",amountPaid);
	meetingMap.put("Price_Sold",priceSold);
	meetingMap.put("Promocode",certificate);
	meetingMap.put("Event_Title",eventTitle);
	meetingMap.put("Payment_ID",paymentID);
	meetingMap.put("Payment_Amount",paymentAmount);
	meetingMap.put("Payment_Method",paymentMethod);
	meetingMap.put("Coach_Email",calendarEmail);
	// Add calendar email to the map
	meetingMap.put("What_Id",leadId);
	// Associate the lead ID with the meeting
	meetingMap.put("$se_module","Leads");
	// Create Meeting record
	meetingResponse = zoho.crm.createRecord("Events",meetingMap);
	info meetingResponse;
}
else
{
	info "The API response is null.";
}



